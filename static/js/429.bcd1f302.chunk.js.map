{"version":3,"file":"static/js/429.bcd1f302.chunk.js","mappings":"mPAGaA,EAAW,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAC1C,GAAgCC,EAAAA,EAAAA,WAAS,GAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KAEA,OACE,2BACE,4BACE,gBAAKC,IAAKJ,EAAOK,MAAM,MAAMC,IAAI,GAAGC,OAAQ,kBAAMJ,GAAY,EAAlB,KAC1CD,IAAY,yKAEhB,uBAAIJ,KACJ,uCAAeC,OAGpB,E,SCXYS,EAAO,WAClB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBR,EAAAA,EAAAA,UAAS,IAAjC,eAAOU,EAAP,KAAaC,EAAb,KAEMC,EAAc,mCAAG,gHAEIC,EAAAA,EAAAA,IAAiBL,GAFrB,gBAEXE,EAFW,EAEXA,KACRC,EACED,EAAKI,KAAI,SAAAC,GAAK,MAAK,CACjBC,GAAID,EAAMC,GACVnB,KAAMkB,EAAMlB,KACZC,UAAWiB,EAAMjB,UACjBC,OAAOkB,EAAAA,EAAAA,IAAaF,EAAMG,cAJd,KAJG,gDAYnBC,QAAQC,IAAR,MAZmB,yDAAH,qDAuBpB,OAPAC,EAAAA,EAAAA,YAAU,YACR,iBAAC,8FACOT,IADP,0CAAD,EAID,GAAE,KAGD,0BACE,wBACGF,EAAKI,KAAI,gBAAGE,EAAH,EAAGA,GAAInB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAWC,EAAxB,EAAwBA,MAAxB,OACR,SAACH,EAAD,CAAmBC,KAAMA,EAAMC,UAAWA,EAAWC,MAAOA,GAA7CiB,EADP,OAMjB,C,gOCtCDM,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAkB,CACtBC,QAJc,oCAQHC,EAAU,mCAAG,WAAOC,GAAP,gGAAaC,EAAb,+BAAqB,KACvCC,EAAe,IAAIC,iBAAJ,kBAAyBN,GAAzB,IAA0CG,KAAAA,KADvC,SAEDJ,EAAAA,EAAAA,IAAA,8BAAiCM,GAAgB,CACtEE,YAAaH,IAHS,uBAEhBI,EAFgB,EAEhBA,KAFgB,kBAKjBA,GALiB,2CAAH,sDASVC,EAAY,mCAAG,WAAOC,EAAOP,GAAd,kFACpBE,EAAe,IAAIC,iBAAJ,kBAAyBN,GAAzB,IAA0CU,MAAAA,EAAOP,KAAAA,KAD5C,SAEHJ,EAAAA,EAAAA,IAAA,wBAA2BM,IAFxB,uBAElBG,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,2CAAH,wDAOZG,EAAU,mCAAG,WAAMlB,GAAN,kFAClBY,EAAe,IAAIC,iBAAJ,UAAyBN,IADtB,SAEDD,EAAAA,EAAAA,IAAA,iBAAoBN,EAApB,YAA0BY,IAFzB,uBAEhBG,EAFgB,EAEhBA,KAFgB,kBAGjBA,GAHiB,2CAAH,sDAOVlB,EAAgB,mCAAG,WAAMG,GAAN,kFACxBY,EAAe,IAAIC,iBAAJ,UAAyBN,IADhB,SAEPD,EAAAA,EAAAA,IAAA,iBAAoBN,EAApB,oBAAkCY,IAF3B,uBAEtBG,EAFsB,EAEtBA,KAFsB,kBAGvBA,GAHuB,2CAAH,sDAOhBI,EAAiB,mCAAG,WAAMnB,GAAN,kFACzBY,EAAe,IAAIC,iBAAJ,UAAyBN,IADf,SAERD,EAAAA,EAAAA,IAAA,iBAAoBN,EAApB,oBAAkCY,IAF1B,uBAEvBG,EAFuB,EAEvBA,KAFuB,kBAGxBA,GAHwB,2CAAH,sDAQjBd,EAAe,SAAAmB,GAC1B,OAAOA,EAAI,yCAAqCA,GAAS,SAC1D,C","sources":["components/CastItem/CastItem.jsx","pages/Cast/Cast.jsx","services/tmdbAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useState } from 'react';\n\nexport const CastItem = ({ name, character, photo }) => {\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  return (\n    <li>\n      <div>\n        <img src={photo} width=\"100\" alt=\"\" onLoad={() => setIsLoaded(true)} />\n        {!isLoaded && <p>Завантаження зображення ...</p>}\n      </div>\n      <p>{name}</p>\n      <p>Character: {character}</p>\n    </li>\n  );\n};\n\nCastItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  character: PropTypes.string.isRequired,\n  photo: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { CastItem } from '../../components/CastItem/CastItem';\nimport { getCreditDetails, getFilmPhoto } from '../../services';\n\nexport const Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  const setCastDetails = async () => {\n    try {\n      const { cast } = await getCreditDetails(movieId);\n      setCast(\n        cast.map(actor => ({\n          id: actor.id,\n          name: actor.name,\n          character: actor.character,\n          photo: getFilmPhoto(actor.profile_path),\n        }))\n      );\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  useEffect(() => {\n    (async () => {\n      await setCastDetails();\n    })();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <div>\n      <ul>\n        {cast.map(({ id, name, character, photo }) => (\n          <CastItem key={id} name={name} character={character} photo={photo} />\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = '8741a9c14c2465a0e7b18901e07e7ee9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst staticURLparams = {\n  api_key: API_KEY,\n};\n\n// Список найпопулярніших фільмів на сьогодні\nexport const getPopular = async (page, token = null) => {\n  const searchParams = new URLSearchParams({ ...staticURLparams, page });\n  const { data } = await axios.get(`/trending/movie/day?${searchParams}`, {\n    cancelToken: token,\n  });\n  return data;\n};\n\n// Пошук фільму за ключовим словом\nexport const getByKeyWord = async (query, page) => {\n  const searchParams = new URLSearchParams({ ...staticURLparams, query, page });\n  const { data } = await axios.get(`/search/movie?${searchParams}`);\n  return data;\n};\n\n// Запит повної інформації про фільм\nexport const getDetails = async id => {\n  const searchParams = new URLSearchParams({ ...staticURLparams });\n  const { data } = await axios.get(`/movie/${id}?${searchParams}`);\n  return data;\n};\n\n// Запит інформації про акторський склад\nexport const getCreditDetails = async id => {\n  const searchParams = new URLSearchParams({ ...staticURLparams });\n  const { data } = await axios.get(`/movie/${id}/credits?${searchParams}`);\n  return data;\n};\n\n// Запит оглядів фільму\nexport const getReviewsDetails = async id => {\n  const searchParams = new URLSearchParams({ ...staticURLparams });\n  const { data } = await axios.get(`/movie/${id}/reviews?${searchParams}`);\n  return data;\n};\n\n// Отримати фото або постер фільму відповідно до параметру\n// (параметр poster_path або backdrop_path приходить з API відповіді)\nexport const getFilmPhoto = path => {\n  return path ? `https://image.tmdb.org/t/p/w500${path}` : 'default';\n};\n"],"names":["CastItem","name","character","photo","useState","isLoaded","setIsLoaded","src","width","alt","onLoad","Cast","movieId","useParams","cast","setCast","setCastDetails","getCreditDetails","map","actor","id","getFilmPhoto","profile_path","console","log","useEffect","axios","staticURLparams","api_key","getPopular","page","token","searchParams","URLSearchParams","cancelToken","data","getByKeyWord","query","getDetails","getReviewsDetails","path"],"sourceRoot":""}